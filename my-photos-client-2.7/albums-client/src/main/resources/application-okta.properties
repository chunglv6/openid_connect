
# Okta specific OAuth 2 related properties 

spring.security.oauth2.client.registration.okta.client-name=myalbum
spring.security.oauth2.client.registration.okta.client-id=<PLACE OKTA CLIENT ID HERE>
spring.security.oauth2.client.registration.okta.client-secret=<PLACE OKTA CLIENT SECRET HERE>
spring.security.oauth2.client.registration.okta.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.okta.scope=openid,profile,email,photolibrary.read

# You need to set the issuer correctly. It will look like https://dev-<SOME_NUMBER>.okta.com/oauth2/default
spring.security.oauth2.client.provider.okta.issuer-uri=<PLACE OKTA ISSUER URL HERE FROM OKTA CONSOLE>

# You need to make sure this Resource API is running locally at port 8081
photolibrary.resource.uri=http://localhost:8081

photolibrary.authorizer=Okta
photolibrary.albums.uri=${photolibrary.resource.uri}/fakealbums/albums
photolibrary.photos.uri=${photolibrary.resource.uri}/fakealbums/mediaItems

# We also send a post redirect URI so that Okta will redirect to that URL after successful logout
# Unfortunately Google and Okta do this differently
photolibrary.logout.url=${spring.security.oauth2.client.provider.okta.issuer-uri}/v1/logout?post_logout_redirect_uri=http://localhost:${server.port}